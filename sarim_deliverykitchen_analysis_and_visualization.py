# -*- coding: utf-8 -*-
"""sarim_DeliveryKitchen Analysis and Visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZUaoLalWcOTaglPGxGUHShC_y_cQdakW

# **Case Study: Analysis of Food Ordering Trends and Operational Performance at Delivery Kitchen**

**Introduction**

This case study analyzes food ordering trends and operational performance at Delivery Kitchen, a prominent food delivery service. The study aims to uncover insights into customer preferences, delivery performance, and revenue generation to inform strategic decisions.

**Business Background**

Delivery Kitchen is a leading food delivery service renowned for its extensive menu options and efficient delivery network. Operating across multiple areas in Bangalore, Delivery Kitchen prides itself on delivering timely and high-quality food services.

**Data Source:** The dataset is sourced from Delivery Kitchen's internal records, capturing detailed information about customer orders.

Below is a Data Dictionary outlining the key fields essential for our case study analysis.

| Column           | Description                                                |
|------------------|------------------------------------------------------------|
| OrderID          | Unique identifier for each order                           |
| CustomerName     | Name of the customer                                       |
| AreaName         | Area or location where the order was placed                 |
| DeliveryAgent    | Name of the delivery agent handling the order               |
| FoodItem         | Name of the food item                                      |
| UnitPrice        | Original price per unit of the food item                   |
| UnitPriceDiscount| Discount applied per unit of the food item                 |
| OrderQuantity    | Quantity of the food item ordered                          |
| OrderDate        | Date when the order was placed (format: DD/MM/YY)          |
| OrderMonth       | Month when the order was placed (e.g., January, February)   |
| PaymentMethod    | Method used for payment (e.g., UPI, Credit Card)           |
| OrderStatus      | Status of the order (Delivered or Cancelled)               |
| OrderDetails     | Details about the order (e.g., On Time, Late, Refund Not Initiated) |
| FoodCategory     | Category of the food item (e.g., Non Indian-Veg, Indian-Non Veg) |

Data File
"https://raw.githubusercontent.com/PrashantInv/Python/main/Dine%26Delivery.csv"

One of the questions in mind of the management is to understand the total sales made in Bengaluru bifurcated into the four food categories. They also wants to know the amount of Discount the company has given to its customer in each of the category.
"""

import pandas as pd
import matplotlib.pyplot as plt
dk=pd.read_csv("https://raw.githubusercontent.com/PrashantInv/Python/main/Dine%26Delivery.csv")

dk['SalesAmount']=(dk['UnitPrice']-dk['UnitPriceDiscount'])*dk['OrderQuantity']
dk['DiscountAmount']=dk['UnitPriceDiscount']*dk['OrderQuantity']
pivot_food_sales=pd.pivot_table(dk,index=['FoodCategory'],values=["SalesAmount","DiscountAmount"],aggfunc={"SalesAmount":["sum"],"DiscountAmount":["sum"]})
pivot_food_sales

import pandas as pd
dk['SalesAmount']=(dk['UnitPrice']-dk['UnitPriceDiscount'])*dk['OrderQuantity']
dk['DiscountAmount']=dk['UnitPriceDiscount']*dk['OrderQuantity']
result=dk.groupby('FoodCategory').agg(
    TotalSales=('SalesAmount','sum'),
    TotalDiscount=('DiscountAmount','sum')
).reset_index()
print(result)

"""**Task 1**

To answer the questions and add the charts we must firstly understand the data provided to us and for this import necessary libraries and first five rows from the data using the csv file link

URL - https://raw.githubusercontent.com/PrashantInv/Python/main/Dine%26Delivery.csv
"""

import pandas as pd
import matplotlib.pyplot as plt
dk=pd.read_csv("https://raw.githubusercontent.com/PrashantInv/Python/main/Dine%26Delivery.csv")
dk.head()

"""# Objective 1: Sales Insights

**SI Task 1:**

The management wants you to find Actual Unit Price, Sales Amount and Discount Amount for all the orders.
"""

import pandas as pd
dk["ActualUnitPrice"]=dk["UnitPrice"]-dk["UnitPriceDiscount"]
dk["SalesAmount"]=(dk["UnitPrice"]-dk["UnitPriceDiscount"])*dk["OrderQuantity"]
dk["DiscountAmount"]=dk["UnitPriceDiscount"]*dk["OrderQuantity"]
dk[['OrderID', 'ActualUnitPrice', 'SalesAmount', 'DiscountAmount']]

"""**SI Task 2:**

The management wants you to show total sales, average sales and number of orders for each month.

Hint: The management only expects you to show delivered orders data unless asked specifically.
"""

orders_delivered=dk.query('OrderStatus=="Delivered"')
pivot_monthly_sales=pd.pivot_table(
    orders_delivered,
    index=["OrderMonth"],
    values=["SalesAmount","OrderID"],
    aggfunc={"SalesAmount":["sum","mean"],"OrderID":"count"})
pivot_monthly_sales

"""**SI Task 3:**

Management wants to know the average monthly sales made in the last year. It also wants to know the average monthly discount provided by the company to its customers.
"""

pivot_avg_sales=pd.pivot_table(
    orders_delivered,
    index="OrderMonth",
    values=["SalesAmount","DiscountAmount"],
    aggfunc={"SalesAmount":"mean","DiscountAmount":"mean"})
pivot_avg_sales.reset_index()

"""**SI Task 4:**

The management wants to see the total quantity sold for each of the food item.
"""

pivot_food_quantity=pd.pivot_table(
    orders_delivered,
    index="FoodItem",
    values="OrderQuantity",
    aggfunc="sum")
pivot_food_quantity.reset_index()

"""**SI Task 5:**

The management wants to know the sales generated from Tandoori chicken for each of the month. Where month with highest sales of tandoori chicken being at top.
"""

tandoori_chicken=dk.query('OrderStatus=="Delivered" and FoodItem=="Tandoori Chicken"')
pivot_tandoori_chicken=pd.pivot_table(
    tandoori_chicken,
    index="OrderMonth",
    values="SalesAmount",
    aggfunc="sum")
pivot_tandoori_chicken.reset_index().sort_values('SalesAmount',ascending=False)

"""**SI Task 6:**

The management wants Food item wise Average sales presented in a pie chart along with necessary lables, titles and percentages.
"""

pivot_food=pd.pivot_table(dk,index=['FoodItem'],values=['SalesAmount'],aggfunc={'SalesAmount':'mean'})
pivot_food.reset_index(inplace=True)
pivot_food

plt.pie(x=pivot_food["SalesAmount"],labels=pivot_food["FoodItem"],autopct= "%.0f%%")
plt.title("Average Sales of Food Items ")
plt.show()

"""**SI Task 7:**

In order to support pricing decision management wants to know about the data regarding higher priced food items, they want you to provide the list of Top-10 food items in terms of average actual unit price. Where food items with the highest average actual unit price being at top.

"""

pivot_top_foods=pd.pivot_table(
    orders_delivered,
    index="FoodItem",
    values="ActualUnitPrice",
    aggfunc="mean")
pivot_top_foods=pivot_top_foods.reset_index().sort_values('ActualUnitPrice',ascending=False).head(10)
pivot_top_foods

"""**SI Task 8:**

The management wants the data regarding Sales amount of each food item in the month of January, they want you to provide the list of Top-10 food items in terms of total sales. Where food items with highest total sales are at the top.

"""

jan_top_foods=dk.query('OrderStatus=="Delivered" and OrderMonth=="January"')
pivot_jan_foods=pd.pivot_table(
    jan_top_foods,
    index="FoodItem",
    values="SalesAmount",
    aggfunc="sum")
pivot_jan_foods=pivot_jan_foods.reset_index().sort_values('SalesAmount',ascending=False).head(10)
pivot_jan_foods

"""# Objective 2: Food Category Performance

**FCP Task 1:**

The management further wants you to create a line plot displaying total Discount amount and total Sales amount for each food category.
"""

pivot_food_sales=pd.pivot_table(dk,index=['FoodCategory'],values=["SalesAmount"],aggfunc={"SalesAmount":"sum"})
pivot_food_sales

pivot_food_dis=pd.pivot_table(dk,index='FoodCategory',values='DiscountAmount',aggfunc='sum')
pivot_food_dis

pivot_food_sales = pd.pivot_table(dk, index=['FoodCategory'], values=["SalesAmount"], aggfunc={"SalesAmount": "sum"})
pivot_food_dis = pd.pivot_table(dk, index=['FoodCategory'], values=["DiscountAmount"], aggfunc="sum")
plt.plot(pivot_food_sales.index, pivot_food_sales["SalesAmount"], label="Sales Amount", marker='o')
plt.plot(pivot_food_dis.index, pivot_food_dis["DiscountAmount"], label="Discount Amount", marker='o')
plt.xlabel("Food Category")
plt.ylabel("Food Category wise Sales and Discount")
plt.title("Yearly Sales and Discount")
plt.legend(title="Legend", loc="upper left")
plt.xticks(rotation=45)
plt.show()

"""**FCP Task 2:**

The management wants the number of orders for each food category presented in a pie chart..
"""

pivot_food_orders=pd.pivot_table(
    orders_delivered,
    index='FoodCategory',
    values='OrderID',
    aggfunc='count'
).reset_index()
pivot_food_orders

plt.pie(x=pivot_food_orders['OrderID'],labels=pivot_food_orders['FoodCategory'],autopct="%.0f%%")
plt.title("Food Category Orders")
plt.show()

"""**FCP Task 3:**


Management is keen to understand the number of orders for each food category in December. They want you to help them analyze the number of orders made under each food category for that month. Show the number of orders from the highest to the lowest.
"""

food_dec=dk.query('OrderStatus=="Delivered" and OrderMonth=="December"')
pivot_dec_orders=pd.pivot_table(
    food_dec,
    index='FoodCategory',
    values='OrderID',
    aggfunc='count'
    ).reset_index().sort_values('OrderID',ascending=False)
pivot_dec_orders

"""**FCP Task 4:**


Management is keen to understand the performance of each food category on a monthly basis. They want you to provide the sales data for each food category for every month, along with the monthly totals and the totals for each category.

Hint: margins=True , sort= False
"""

pivot_months_category = pd.pivot_table(
    orders_delivered,
    index='OrderMonth',
    columns='FoodCategory',
    values='SalesAmount',
    aggfunc='sum',
    margins=True
).reset_index()
pivot_months_category

"""**FCP Task 5:**

The management wants to dive deeper into data and understand which of their items are popular among all areas. They want a detailed table for item wise quantities sold based on area. The management wants to check the popularity of these items with an option to input the Food category in order to check all items under that particular category.
"""

Input_FoodCategory = input("Enter the Food Category Name: ")
popular_items = dk.query('OrderStatus=="Delivered" and FoodCategory==@Input_FoodCategory')
pivot_popular_items = pd.pivot_table(
    popular_items,
    index='FoodItem',
    columns='AreaName',
    values='OrderQuantity',
    aggfunc='sum'
    ).reset_index()
pivot_popular_items

"""**FCP Task 6:**

The management wants to see a line chart of total sales by food category for each month. They need an option to input a specific food category to check its monthly sales. Currently, the company aims to compare the sales between two food categories.
"""

import pandas as pd
import matplotlib.pyplot as plt

pivot_monthly_sales = pd.pivot_table(
    orders_delivered,
    index="OrderMonth",
    columns="FoodCategory",
    values="SalesAmount",
    aggfunc="sum"
)

category1 = input("Enter the first Food Category: ")
category2 = input("Enter the second Food Category: ")

if category1 in pivot_monthly_sales.columns and category2 in pivot_monthly_sales.columns:
    filtered_data = pivot_monthly_sales[[category1, category2]]

    filtered_data.plot(kind='line', marker='o', figsize=(10, 6))
    plt.title(f'Monthly Total Sales Comparison: {category1} vs {category2}')
    plt.xlabel('Order Month')
    plt.ylabel('Total Sales')
    plt.legend(title='Food Category')
    plt.grid(True)
    plt.show()
else:
    print("One or both categories do not exist in the data. Please try again.")

"""# Objective 3: Customer and Order Analysis

**COA Task 1:**

The management wants to compare the number of orders on the basis of payment method. The management is expecting the result in a pie chart.
"""

pivot_orders = pd.pivot_table(
    orders_delivered,
    index='PaymentMethod',
    values='OrderID',
    aggfunc='count',
).reset_index()
pivot_orders

plt.pie(x=pivot_orders['OrderID'],labels=pivot_orders['PaymentMethod'],autopct='%.0f%%')
plt.title('No. of Orders by Payment Method')
plt.show()

"""**COA Task 2:**

To understand the top clients, Management wants you to provide the List of Top-5 customers as per the total amount of sales made to them in the last year where the customer with the highest sales is at top.
"""

pivot_top_customers=pd.pivot_table(
    orders_delivered,
    index='CustomerName',
    values='SalesAmount',
    aggfunc='sum'
).reset_index().sort_values('SalesAmount',ascending=False).head()
pivot_top_customers

"""**COA Task 3:**

One of the important areas for management is that they must have the ability to compare sales made to multiple customers in different Food categories which will allow them to personalize the offers to the customers. At present they want capabilities to compare two customers i.e Shreya Singh and Akash Gupta.
"""

pivot_sales_comparison = pd.pivot_table(
    orders_delivered,
    index="FoodCategory",
    columns="CustomerName",
    values="SalesAmount",
    aggfunc="sum"
)
filtered_sales_comparison = pivot_sales_comparison[['Shreya Singh', 'Akash Gupta']]

filtered_sales_comparison.plot(kind='bar', figsize=(10, 6))
plt.title("Sales Comparison by Food Category for Shreya Singh and Akash Gupta")
plt.xlabel("Food Category")
plt.ylabel("Total Sales")
plt.legend(title="Customer Name")
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.show()

"""**COA Task 4:**

To understand the details about discounts provided, management wants you to prepare a list of the top 10 customers based on the total amount of discounts they received in the last year, with the customer receiving the highest discount at the top.
"""

pivot_discount=pd.pivot_table(
    orders_delivered,
    index='CustomerName',
    values='DiscountAmount',
    aggfunc='sum'
).reset_index().sort_values('DiscountAmount',ascending=False).head(10)
pivot_discount

"""**COA Task 5:**

Management wants you to prepare the List of Top-5 food items that are purchased by Anjali Jain based on the sales amount in the last year where the food item with the highest sales amount is at top.
"""

anjali = dk.query('OrderStatus=="Delivered" and CustomerName=="Anjali Jain"')
pivot_anjali = pd.pivot_table(
    anjali,
    index='FoodItem',
    values='SalesAmount',
    aggfunc='sum'
).reset_index().sort_values('SalesAmount',ascending=False).head()
pivot_anjali

"""**COA Task 6:**

Management wants to know the data of top 10 customers who buy Biriyani. They want data displaying the customer name along with Order quantity where the customer with the highest quantity purchased being at top.
"""

biryani=dk.query('OrderStatus=="Delivered" and FoodItem=="Biryani"')
pivot_biryani=pd.pivot_table(
    biryani,
    index='CustomerName',
    values='OrderQuantity',
    aggfunc='sum'
).reset_index().sort_values('OrderQuantity',ascending=False).head(10)
pivot_biryani

"""**COA Task 7:**

The management wants to see a line chart of the number of orders delivered and cancelled for each food item. This helps the business to analyse the trend between successful orders and cancelled orders.
"""

pivot_delivered=pd.pivot_table(
    orders_delivered,
    index='FoodItem',
    values='OrderID',
    aggfunc='count'
).reset_index()
pivot_delivered

orders_cancelled=dk.query('OrderStatus=="Cancelled"')
pivot_cancelled=pd.pivot_table(
    orders_cancelled,
    index='FoodItem',
    values='OrderID',
    aggfunc='count'
).reset_index()
pivot_cancelled

plt.plot(pivot_delivered["FoodItem"],pivot_delivered["OrderID"],label="Orders Delivered",marker='o')
plt.plot(pivot_cancelled["FoodItem"],pivot_cancelled["OrderID"],label="Orders Cancelled",marker='o')
plt.xlabel("Food Items")
plt.ylabel("Number of Orders")
plt.title("Yearly Orders Delivered and Cancelled")
plt.legend(title="Legend")
plt.xticks(rotation=90)

"""**COA Task 8:**

Management wants to see the list of all food items along with their number of orders where a refund has not been initiated. Ensure the list is arranged from the highest to the lowest number of orders.
"""

no_refund=dk.query('OrderDetails=="Refund Not Initiated"')
pivot_no_refund=pd.pivot_table(
    no_refund,
    index='FoodItem',
    values='OrderID',
    aggfunc='count'
).reset_index().sort_values('OrderID',ascending=False)
pivot_no_refund

"""**COA Task 9:**

Management wants to know the data of fish curry sales. They want data displaying the order month along with the number of orders made for fish curry.

Hint: sort=False
"""

fish_curry=dk.query('OrderStatus=="Delivered" and FoodItem=="Fish Curry"')
pivot_fish=pd.pivot_table(
    fish_curry,
    index="OrderMonth",
    values="OrderID",
    aggfunc="count"
).reset_index().sort_values('OrderID',ascending=False)
pivot_fish

"""# Objective 4: Area and Performance Analysis

**APA Task 1:**

It's important for management to understand how the different food categories have performed in different areas of the city so they want you to present the area-wise total sales for each category.
"""

pivot_area_food = pd.pivot_table(
    orders_delivered,
    index='AreaName',
    columns='FoodCategory',
    values='SalesAmount',
    aggfunc='sum'
).reset_index()
pivot_area_food

"""**APA Task 2:**

One of the important questions for management is to evaluate the performance of delivery personnel for performance reviews. They want the 'OrderDetails' for every area, which should be available for each individual delivery agent. This data will allow them to enter the name of a delivery agent and obtain the details of the number of orders delivered by that agent in each area.

Hint: margins=True , sort= False
"""

deliveryagent= input('Enter Name of the delivery agent: ')
pivot_agent_review = pd.pivot_table(
    dk,
    index='AreaName',
    columns='OrderDetails',
    values='OrderID',
    aggfunc='count',
    margins=True
).reset_index().sort_values('All',ascending=False)
pivot_agent_review

"""**APA Task 3:**

One of the important areas for management is that they must have the ability to compare sales made in different areas for different food categories which will allow them to understand and compare the areas. They want capabilities to compare upto 3 Areas.
"""

AreaName1 = input('Enter 1st Area Name: ')
AreaName2 = input('Enter 2nd Area Name: ')
AreaName3 = input('Enter 3rd Area Name: ')

pivot_area_analysis = pd.pivot_table(
    orders_delivered[orders_delivered['AreaName'].isin([AreaName1, AreaName2, AreaName3])],
    index='AreaName',
    columns='FoodCategory',
    values='SalesAmount',
    aggfunc='sum'
).reset_index()

pivot_area_analysis

"""**APA Task 4:**

For every area company has the following operating principle for delivery: Not more than 10% of total orders must be late and at least 15% of total orders must be Before Time. Management wants a comment from you with calculations whether the company is able to follow these operating principles at overall level.
"""

total_orders=orders_delivered['OrderID'].count()
total_late=orders_delivered.query('OrderDetails=="Late"')['OrderID'].count()
total_before=orders_delivered.query('OrderDetails=="Before Time"')['OrderID'].count()
late_orders_percentage=round((total_late/total_orders)*100,2)
before_orders_percentage = round((total_before/total_orders)*100,2)
print(f"The Percenatge of late orders is {late_orders_percentage}% \n"
f"and the Percentage of Before Time Orders is {before_orders_percentage}%. ")

"""Comment:As we can see, the company is able to achieve better than the expected percentage of orders in terms of Before time delivery i.e 20.68%. But the company has failed in terms of achieving the Late delivery orders target. i.e the condition of late delivery being 18.27%

**Comment: As we can see, the company is able to achieve better than the expected percentage of orders in terms of Before time delivery i.e more than 242.25 orders. But the company has failed in terms of achieving the Late delivery orders target. i.e the condition of late delivery being less than 161.5.**

**APA Task 5:**

Management wants a sales bar chart of the company for the chosen Food category (Input for Food Category) for each area. Also the management wants to see the same data (i.e Area wise sales for chosen food category) in a pie chart along with necessary labels, titles and percentages.
"""

food_category = input("Enter the Food Category: ")
category_delivered = orders_delivered[orders_delivered['FoodCategory'].isin([food_category])]
if category_delivered.empty:
    print(f"Please Enter Correct FoodCategory Name. Try Again !!!{food_category}")
else:
  pivot_area_category = pd.pivot_table(
    category_delivered,
    index = 'AreaName',
    values='SalesAmount',
    aggfunc='sum'
    ).reset_index()
  plt.figure(figsize=(8, 8))
  plt.bar(x=pivot_area_category['AreaName'],height=pivot_area_category['SalesAmount'])
  plt.xlabel('Area Name')
  plt.ylabel('Sales Amount')
  plt.title('Food Category wise Sales Amount')
  plt.xticks(rotation=45)
  plt.show()
  plt.figure(figsize=(8, 8))
  plt.pie(x=pivot_area_category['SalesAmount'],labels=pivot_area_category['AreaName'],autopct="%.0f%%")
  plt.title('Area wise Sales Percentage')
  plt.show()

"""# Objective 5: Cancellation and Refund Data

**CRD Task 1:**

Management wants to understand whether the cancellation and refund process is working properly or not, they want to see the number of orders which were cancelled bifurcated into refund inititated and not initiated for each month.

Hint: Margins= True, sort= False
"""

cancelled_orders= dk.query('OrderStatus=="Cancelled"')
pivot_cancelled = pd.pivot_table(
    cancelled_orders,
    index='OrderMonth',
    columns='OrderDetails',
    values='OrderID',
    aggfunc='count',
    margins=True,
    sort=False
).reset_index()
pivot_cancelled

"""**CRD Task 2:**

Management wants to bifurcate the above data as per the payment method to see whether the cancelled orders data has any relationship with the payment method or not.
"""

cancelled_orders= dk.query('OrderStatus=="Cancelled"')
pivot_cancelled_payment = pd.pivot_table(
    cancelled_orders,
    index='PaymentMethod',
    columns='OrderDetails',
    values='OrderID',
    aggfunc='count',
    margins=True,
    sort=False
).reset_index()
pivot_cancelled_payment

"""**CRD Task 3:**

The management wants to know the total order amount of cancelled orders along with their refund status.
"""

cancelled_orders= dk.query('OrderStatus=="Cancelled"')
pivot_cancelled_amount = pd.pivot_table(
    cancelled_orders,
    index='OrderDetails',
    values='SalesAmount',
    aggfunc='sum',
    margins=True,
    sort=False
).reset_index()
pivot_cancelled_amount.rename(columns={'SalesAmount':'OrderAmount'},inplace=True)
pivot_cancelled_amount

"""**CRD Task 4:**

To understand the clients with highest cancellations, Management wants you to provide the List of Top-10 customers in terms of refund amount for cancelled orders in the last year where customera eligible for the highest refund amount are at top.

Hint: Refund amount is the sales amount of cancelled order irrespective of refund status.
"""

pivot_cancel_customers = pd.pivot_table(
    cancelled_orders,
    index='CustomerName',
    values=['SalesAmount','OrderID'],
    aggfunc={'SalesAmount':'sum','OrderID':'count'}
).reset_index().sort_values('SalesAmount',ascending=False).head(10)
pivot_cancel_customers.columns=['CustomerName','CancelOrderCount','TotalRefundAmount']
pivot_cancel_customers

"""**CRD Task 5:**

Management wants a Food category wise bar chart displaying the number of cancelled orders.
"""

pivot_bar_cancel=pd.pivot_table(
    cancelled_orders,
    index='FoodCategory',
    values='OrderID',
    aggfunc='count'
).reset_index()
plt.bar(x=pivot_bar_cancel["FoodCategory"],height=pivot_bar_cancel["OrderID"])
plt.xlabel("Food Category")
plt.ylabel("Number of Cancelled Orders")
plt.title("Category wise cancelled orders")
plt.xticks(rotation=45)
plt.show()

"""**CRD Task 6:**


Management wants the data regarding the number of orders canceled in each area. Ensure the list is arranged from the highest to the lowest number of canceled orders.
"""

pivot_area_cancel= pd.pivot_table(
    cancelled_orders,
    index='AreaName',
    values='OrderID',
    aggfunc='count'
).reset_index().sort_values('OrderID',ascending=False)
pivot_area_cancel